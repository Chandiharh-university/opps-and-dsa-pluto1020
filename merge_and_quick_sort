#include <iostream>
#include <vector>
#include <limits>
#include <algorithm>

using namespace std;

void merge(vector<int>& arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    vector<int> L(n1);
    vector<int> R(n2);

    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(vector<int>& arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1);
}

void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

vector<int> getUserInput() {
    int numElements;
    while (true) {
        cout << "Enter the number of elements: ";
        cin >> numElements;
        if (cin.fail() || numElements <= 0) {
            cout << "Invalid input. Please enter a positive integer.\n";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            continue;
        }
        break;
    }

    vector<int> arr(numElements);
    for (int i = 0; i < numElements; i++) {
        while (true) {
            cout << "Enter element " << i + 1 << ": ";
            cin >> arr[i];
            if (cin.fail()) {
                cout << "Invalid input. Please enter an integer.\n";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                continue;
            }
            break;
        }
    }
    return arr;
}

int main() {
    vector<int> userArray = getUserInput();
    vector<int> mergeArray = userArray;
    vector<int> quickArray = userArray;

    cout << "\nUnsorted array: ";
    for (int x : userArray) cout << x << " ";
    cout << endl;

    mergeSort(mergeArray, 0, mergeArray.size() - 1);
    cout << "Merge Sorted array: ";
    for (int x : mergeArray) cout << x << " ";
    cout << endl;

    quickSort(quickArray, 0, quickArray.size() - 1);
    cout << "Quick Sorted array: ";
    for (int x : quickArray) cout << x << " ";
    cout << endl;

    return 0;
}
